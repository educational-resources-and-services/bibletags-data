{
  "name": "@bibletags/bibletags-data",
  "version": "0.7.3",
  "main": "app.js",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/educational-resources-and-services/bibletags-data.git"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/educational-resources-and-services/bibletags-data/issues"
  },
  "homepage": "https://bibletags.org",
  "author": "Andy Hubert",
  "funding": {
    "type": "individual",
    "url": "https://gofundme.com/f/yarn4-bible-tags"
  },
  "scripts": {
    "start": "node app.js",
    "confirm": "read -p 'Are you sure? ' -n 1 -r && echo '\n' && [[ $REPLY =~ ^[Yy]$ ]]",
    "cron-test": "node ./crons/test.js",
    "test": "npm run go-test -s",
    "go-test": "(echo '--------------------\nRunning tests...\n--------------------\n\n** WARNING **  This requires a reset on the db and will wipe all current data except for those tables created when you ran `setup-db`!\n' && npm run confirm && npm run do-reset-db && mocha tests/*.test.js --require tests/hooks.js) || true",
    "update-db": "npm run go-update-db -s",
    "go-update-db": "(echo '--------------------\nUpdating database...\n--------------------\n' && npm run confirm && node src/db/update.js) || true",
    "setup-db": "npm run go-setup-db -s",
    "go-setup-db": "(echo '----------------------\nSetting up database...\n----------------------\n\n** WARNING **  This will wipe current data!\n' && npm run confirm && npm run do-setup-db && npm run do-imports && npm run do-unit-words && npm run do-defs-and-lemma) || true",
    "do-setup-db": "node ./src/scripts/deleteUsersAndSessionsTables.js && node ./node_modules/session-sync-auth-site/src/createDBTables.js mysql://root@localhost/$(grep RDS_DATABASE .env | cut -d '=' -f2) && node src/db/setup.js && node src/db/seed.js",
    "do-imports": "node ./src/scripts/importUHBFromUsfm.js && node ./src/scripts/importUGNTFromUsfm.js && node ./src/scripts/importLXXFromUsfm.js",
    "do-unit-words": "node ./src/scripts/populateUHBUnitWordsTable.js && node ./src/scripts/populateUGNTUnitWordsTable.js && node ./src/scripts/populateLXXUnitWordsTable.js",
    "do-defs-and-lemma": "node ./src/scripts/createUHBDefAndPOS.js && node ./src/scripts/createUGNTDefAndPOS.js && node ./src/scripts/createLemmaTable.js && node ./src/scripts/createTempEngGloss.js && node ./src/scripts/createInitialEngLexEntry.js",
    "import-update-to-original-text": "(echo '----------------------\nImport update to original USFM...\n----------------------\n\n** WARNING **  This will wipe current data!\n' && npm run confirm && npm run do-setup-db && npm run do-imports && npm run do-unit-words && npm run do-defs-and-lemma && update-original-in-apps-default-tenant) || true",
    "update-original-in-apps-default-tenant": "cd ../bibletags-react-native-app && npm run usfm-to-sqlite defaultTenant && cd - && node ./src/scripts/updateOriginalSearchTablesInAppsDefaultTenant.js",
    "reset-db": "npm run go-reset-db -s",
    "go-reset-db": "(echo '-------------------------\nResetting the database...\n-------------------------\n\n** WARNING **  This will wipe all current data except for those tables created when you ran `setup-db`!\n' && npm run confirm && npm run do-reset-db) || true",
    "do-reset-db": "node src/db/reset.js && node src/db/seed.js",
    "deploy-staging": "npm run go-deploy-staging -s",
    "go-deploy-staging": "(echo '-----------------\nDeploy staging...\n-----------------\n' && npm run confirm && rm -rf pages/* && serverless deploy --stage staging && npm run go-deploy-staging-crons-execute) || true",
    "deploy-production": "npm run go-deploy-production -s",
    "go-deploy-production": "(echo '--------------------\nDeploy production...\n--------------------\n' && npm run confirm && rm -rf pages/* && serverless deploy --stage production && npm run go-deploy-production-crons-execute) || true",
    "deploy-staging-graphql": "npm run go-deploy-staging-graphql -s",
    "go-deploy-staging-graphql": "(echo '-------------------------\nDeploy staging graphql...\n-------------------------\n' && npm run confirm && rm -rf pages/* && serverless deploy --stage staging) || true",
    "deploy-production-graphql": "npm run go-deploy-production-graphql -s",
    "go-deploy-production-graphql": "(echo '----------------------------\nDeploy production graphql...\n----------------------------\n' && npm run confirm && rm -rf pages/* && serverless deploy --stage production) || true",
    "deploy-staging-crons": "npm run go-deploy-staging-crons -s",
    "go-deploy-staging-crons": "(echo '-----------------------\nDeploy staging crons...\n-----------------------\n' && npm run confirm && npm run go-deploy-staging-crons-execute) || true",
    "go-deploy-staging-crons-execute": "rm -rf pages/* && cd crons && cp serverless.staging.yml serverless.yml && serverless deploy --stage staging && npm run update-staging-cron-role && rm serverless.yml && cd -",
    "update-staging-cron-role": "aws lambda update-function-configuration --function-name biblearc-data-crons-staging-lambda --role arn:aws:iam::572013440289:role/bibletags-data > /dev/null",
    "deploy-production-crons": "npm run go-deploy-production-crons -s",
    "go-deploy-production-crons": "(echo '--------------------------\nDeploy production crons...\n--------------------------\n' && npm run confirm && npm run go-deploy-production-crons-execute) || true",
    "go-deploy-production-crons-execute": "rm -rf pages/* && cd crons && cp serverless.production.yml serverless.yml && serverless deploy --stage production && npm run update-production-cron-role && rm serverless.yml && cd -",
    "update-production-cron-role": "aws lambda update-function-configuration --function-name biblearc-data-crons-lambda --role arn:aws:iam::572013440289:role/bibletags-data > /dev/null",
    "update-patch": "npm run go-update-patch -s",
    "update-major": "npm run go-update-major -s",
    "update-minor": "npm run go-update-minor -s",
    "go-update-patch": "echo '-------------------------------------------\nUpdate version (PATCH) and deploy to npm...\n-------------------------------------------\n' && npm run confirm && npm i && npm version patch && npm run publish-to-npm",
    "go-update-minor": "echo '-------------------------------------------\nUpdate version (MINOR) and deploy to npm...\n-------------------------------------------\n' && npm run confirm && npm i && npm version minor && npm run publish-to-npm",
    "go-update-major": "echo '-------------------------------------------\nUpdate version (MAJOR) and deploy to npm...\n-------------------------------------------\n' && npm run confirm && npm i && npm version major && npm run publish-to-npm",
    "publish-to-npm": "npm publish --access public && echo '\nSUCCESS!\n'",
    "sync-original-data-to-production": "node ./src/scripts/syncOriginalDataToProduction.js"
  },
  "dependencies": {
    "@bibletags/bibletags-ui-helper": "^0.11.3",
    "@bibletags/bibletags-versification": "^2.0.0",
    "aws-sdk": "^2.1189.0",
    "better-sqlite3": "^7.5.1",
    "body-parser": "^1.19.1",
    "colors": "^1.4.0",
    "cors": "^2.8.5",
    "dotenv": "^16.0.0",
    "express": "^4.17.2",
    "express-graphql": "^0.12.0",
    "fs-extra": "^10.1.0",
    "graphql": "^15.4.0",
    "graphql-type-json": "^0.3.2",
    "inline-i18n": "^0.1.5",
    "inquirer": "^8.2.4",
    "inquirer-file-tree-selection-prompt": "^1.0.19",
    "inquirer-fuzzy-path": "^2.3.0",
    "json2csv": "^5.0.7",
    "mysql2": "^2.3.3",
    "nodemailer": "^6.7.7",
    "retry-as-promised": "^5.0.0",
    "sequelize": "^6.15.1",
    "session-sync-auth-site": "^0.2.0",
    "turndown": "^7.1.1",
    "uuid": "^8.3.2"
  },
  "devDependencies": {
    "chai": "^4.3.6",
    "mocha": "^9.2.0",
    "supertest": "^6.2.2"
  }
}
